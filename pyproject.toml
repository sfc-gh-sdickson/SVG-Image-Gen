[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "svg-image-generator"
version = "1.0.0"
description = "SVG Image Generation with Snowflake Cortex AI"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "SVG Image Generator Team", email = "team@svg-generator.com"}
]
maintainers = [
    {name = "SVG Image Generator Team", email = "team@svg-generator.com"}
]
keywords = ["svg", "ai", "snowflake", "cortex", "streamlit", "image-generation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
requires-python = ">=3.8"
dependencies = [
    "streamlit>=1.28.0",
    "snowflake-snowpark-python>=1.8.0",
    "snowflake-connector-python>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "responses>=0.23.0",
    "factory-boy>=3.3.0",
    "freezegun>=1.2.0",
]
monitoring = [
    "structlog>=23.0.0",
    "prometheus-client>=0.17.0",
    "sentry-sdk>=1.28.0",
]
security = [
    "cryptography>=41.0.0",
    "python-dotenv>=1.0.0",
    "bcrypt>=4.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "responses>=0.23.0",
    "factory-boy>=3.3.0",
    "freezegun>=1.2.0",
    "coverage[toml]>=7.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/svg-image-generator"
Documentation = "https://svg-image-generator.readthedocs.io"
Repository = "https://github.com/your-org/svg-image-generator.git"
"Bug Tracker" = "https://github.com/your-org/svg-image-generator/issues"
Changelog = "https://github.com/your-org/svg-image-generator/blob/main/CHANGELOG.md"

[project.scripts]
svg-generator = "svg_image_generator.cli:main"

[project.gui-scripts]
svg-generator-gui = "svg_image_generator.gui:main"

[tool.hatch.build.targets.wheel]
packages = ["src/svg_image_generator"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/ontologies",
    "README.md",
    "CHANGELOG.md",
    "LICENSE",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["svg_image_generator"]
known_third_party = ["streamlit", "snowflake", "pytest"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "snowflake.*",
    "prometheus_client.*",
    "structlog.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/svg_image_generator",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "snowflake: marks tests that require Snowflake connection",
    "ai: marks tests that require AI service",
]

[tool.coverage.run]
source = ["src/svg_image_generator"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/\.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.structlog]
processors = [
    "structlog.stdlib.filter_by_level",
    "structlog.stdlib.add_logger_name",
    "structlog.stdlib.add_log_level",
    "structlog.stdlib.PositionalArgumentsFormatter",
    "structlog.processors.TimeStamper",
    "structlog.processors.StackInfoRenderer",
    "structlog.processors.format_exc_info",
    "structlog.processors.UnicodeDecoder",
    "structlog.processors.JSONRenderer",
]

[tool.semantic_release]
version_toml = "pyproject.toml:project.version"
version_variable = "src/svg_image_generator/__init__.py:__version__"
dist_path = "dist/"
upload_to_pypi = true
upload_to_release = true
build_command = "pip install build && python -m build"
changelog_file = "CHANGELOG.md"

[tool.semantic_release.changelog]
exclude_commit_types = ["ci", "chore", "docs", "style", "refactor", "perf", "test"]

[tool.semantic_release.changelog.environment]
variable = "GITHUB_TOKEN"
github_token = "GITHUB_TOKEN"

[tool.poetry]
name = "svg-image-generator"
version = "1.0.0"
description = "SVG Image Generation with Snowflake Cortex AI"
authors = ["SVG Image Generator Team <team@svg-generator.com>"]
readme = "README.md"
packages = [{include = "svg_image_generator", from = "src"}]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[tool.poetry.dependencies]
python = "^3.8"
streamlit = "^1.28.0"
snowflake-snowpark-python = "^1.8.0"
snowflake-connector-python = "^3.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-mock = "^3.10.0"
pytest-cov = "^4.0.0"
black = "^23.0.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
pre-commit = "^3.0.0"
bandit = "^1.7.0"

[tool.poetry.group.monitoring.dependencies]
structlog = "^23.0.0"
prometheus-client = "^0.17.0"
sentry-sdk = "^1.28.0"

[tool.poetry.group.security.dependencies]
cryptography = "^41.0.0"
python-dotenv = "^1.0.0"
bcrypt = "^4.0.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.0"
mkdocs-material = "^9.0.0"
mkdocstrings = {extras = ["python"], version = "^0.20.0"}

[tool.poetry.scripts]
svg-generator = "svg_image_generator.cli:main" 